package dk.patientassist.api;

import dk.patientassist.App;
import dk.patientassist.persistence.enums.Allergens;
import dk.patientassist.persistence.enums.DishStatus;
import io.javalin.Javalin;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.junit.jupiter.api.*;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

/**
 * Integration tests for DishController using RestAssured.
 * Covers CRUD operations and filtering logic.
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class DishControllerTest {

    private Javalin app;
    private static final int PORT = 7777;

    @BeforeAll
    void startServer() {
        app = App.start(PORT);
        RestAssured.baseURI = "http://localhost";
        RestAssured.port = PORT;
    }

    @AfterAll
    void stopServer() {
        app.stop();
    }

    /**
     * Test successful dish creation with valid input.
     */
    @Test
    void testCreateDish_Success() {
        int id = createTempDish("Dish Create", DishStatus.TILGÆNGELIG, Allergens.ÆG);
        Assertions.assertTrue(id > 0);
    }

    /**
     * Test that invalid enum values return 400 Bad Request.
     */
    @Test
    void testCreateDish_BadEnum() {
        Map<String, Object> dish = baseDishData();
        dish.put("status", "INVALID_ENUM");
        dish.put("allergens", "FAKE_ALLERGEN");

        given()
                .contentType(ContentType.JSON)
                .body(dish)
                .when()
                .post("/dishes")
                .then()
                .statusCode(400)
                .body(containsString("Invalid"));
    }

    /**
     * Test updating a dish's status.
     */
    @Test
    void testUpdateDish_Success() {
        int id = createTempDish("Dish Update", DishStatus.TILGÆNGELIG, Allergens.SOJA);

        Map<String, Object> update = baseDishData();
        update.put("name", "Updated Name");
        update.put("status", DishStatus.UDSOLGT.name());

        given()
                .contentType(ContentType.JSON)
                .body(update)
                .when()
                .put("/dishes/" + id)
                .then()
                .statusCode(200)
                .body("status", equalTo("SOLD_OUT"));
    }

    /**
     * Test fetching a dish by ID.
     */
    @Test
    void testGetDishById() {
        int id = createTempDish("GetById", DishStatus.TILGÆNGELIG, Allergens.GLUTEN);

        given()
                .when()
                .get("/dishes/" + id)
                .then()
                .statusCode(200)
                .body("id", equalTo(id));
    }

    /**
     * Test deleting a dish by ID.
     */
    @Test
    void testDeleteDish() {
        int id = createTempDish("DeleteDish", DishStatus.TILGÆNGELIG, Allergens.FISK);

        given()
                .when()
                .delete("/dishes/" + id)
                .then()
                .statusCode(200)
                .body("id", equalTo(id));
    }

    /**
     * Test filtering dishes by status and allergen.
     */
    @Test
    void testFilterDishesByStatusAndAllergen() {
        createTempDish("FilterDish", DishStatus.TILGÆNGELIG, Allergens.SENNEP);

        given()
                .queryParam("status", "AVAILABLE")
                .queryParam("allergen", "MUSTARD")
                .when()
                .get("/dishes/filter")
                .then()
                .statusCode(200)
                .body("size()", greaterThanOrEqualTo(1));
    }

    /**
     * Helper to generate common dish data.
     */
    private Map<String, Object> baseDishData() {
        Map<String, Object> data = new HashMap<>();
        data.put("name", "Temp Dish");
        data.put("description", "Generated by test");
        data.put("available_from", LocalDate.now().toString());
        data.put("available_until", LocalDate.now().plusDays(3).toString());
        data.put("status", DishStatus.TILGÆNGELIG.name());
        data.put("kcal", 450);
        data.put("protein", 30);
        data.put("carbohydrates", 35);
        data.put("fat", 15);
        data.put("allergens", Allergens.SESAM.name());
        return data;
    }

    /**
     * Helper to create and persist a temporary dish.
     *
     * @param name     dish name
     * @param status   dish status
     * @param allergen allergen
     * @return created dish ID
     */
    private int createTempDish(String name, DishStatus status, Allergens allergen) {
        Map<String, Object> dish = baseDishData();
        dish.put("name", name);
        dish.put("status", status.name());
        dish.put("allergens", allergen.name());

        return given()
                .contentType(ContentType.JSON)
                .body(dish)
                .when()
                .post("/dishes")
                .then()
                .statusCode(201)
                .extract()
                .path("id");
    }
}
